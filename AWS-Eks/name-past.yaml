AWSTemplateFormatVersion: '2010-09-09'
Description: Create a Route 53 Record for an existing EKS Classic Load Balancer using Lambda Function

Resources:
  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "elasticloadbalancing:DescribeLoadBalancers"
                  - "route53:ChangeResourceRecordSets"
                  - "route53:ListHostedZones"
                  - "route53:ListHostedZonesByName"
                Resource: "*"

  # Lambda Function
  FindAndCreateRecordFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import logging

          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger()

          def handler(event, context):
              region = 'us-east-1'  # Buraya Load Balancer'ın bulunduğu bölgeyi yazın
              elb_client = boto3.client('elb', region_name=region)
              route53_client = boto3.client('route53', region_name=region)

              # Load Balancer name to search for
              target_lb_name = 'a57a09920e4954257b042837290b9f80'

              # Describe Load Balancers
              response = elb_client.describe_load_balancers()
              logger.info(f"Found {len(response['LoadBalancerDescriptions'])} Load Balancers")

              # Filter Load Balancer by name
              load_balancer_dns_name = None
              for lb in response['LoadBalancerDescriptions']:
                  lb_name = lb['LoadBalancerName']
                  logger.info(f"Checking Load Balancer: {lb_name}")
                  if lb_name == target_lb_name:
                      load_balancer_dns_name = lb['DNSName']
                      logger.info(f"Found target Load Balancer: {lb_name}")
                      break

              if not load_balancer_dns_name:
                  logger.error(f"No Load Balancer found with the name {target_lb_name}")
                  raise Exception(f"No Load Balancer found with the name {target_lb_name}")

              logger.info(f"Load Balancer DNS Name: {load_balancer_dns_name}")

              # Get Route 53 hosted zone ID (use your specific hosted zone)
              hosted_zones = route53_client.list_hosted_zones_by_name(DNSName="awspublic.link.")
              hosted_zone_id = hosted_zones['HostedZones'][0]['Id']
              logger.info(f"Hosted Zone ID: {hosted_zone_id}")

              # Create Route 53 record
              response = route53_client.change_resource_record_sets(
                  HostedZoneId=hosted_zone_id,
                  ChangeBatch={
                      'Changes': [
                          {
                              'Action': 'CREATE',
                              'ResourceRecordSet': {
                                  'Name': 'argocd.awspublic.link.',  # Sonundaki nokta eklendi
                                  'Type': 'A',
                                  'AliasTarget': {
                                      'HostedZoneId': 'Z35SXDOTRQ7X7K',  # Use appropriate zone ID for your region
                                      'DNSName': load_balancer_dns_name,
                                      'EvaluateTargetHealth': False
                                  }
                              }
                          }
                      ]
                  }
              )

              logger.info(f"Route 53 Record Created: {response}")

              return {
                  'statusCode': 200,
                  'body': json.dumps('Record created successfully')
              }

      Runtime: python3.9
      Timeout: 300

  # Lambda Invoke Permission
  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt FindAndCreateRecordFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"

  # Custom Resource to trigger the Lambda function
  CustomResourceTrigger:
    Type: "Custom::TriggerLambda"
    Properties:
      ServiceToken: !GetAtt FindAndCreateRecordFunction.Arn

Outputs:
  LambdaFunctionArn:
    Description: "ARN of the Lambda function that creates the DNS record"
    Value: !GetAtt FindAndCreateRecordFunction.Arn
