AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS Cluster ve Node Group olu≈üturur'

Resources:
  EksVpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '192.168.0.0/16'
      Tags:
        - Key: Name
          Value: eks-vpc

  EksVpcIgw:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: eks-vpc-igw

  VpcGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref EksVpc
      InternetGatewayId: !Ref EksVpcIgw

  PublicSubnetUsEast1a:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref EksVpc
      CidrBlock: '192.168.64.0/19'
      AvailabilityZone: 'us-east-1a'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-us-east-1a
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: kubernetes.io/cluster/eks-cluster
          Value: owned

  PublicSubnetUsEast1b:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref EksVpc
      CidrBlock: '192.168.96.0/19'
      AvailabilityZone: 'us-east-1b'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-us-east-1b
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: kubernetes.io/cluster/eks-cluster
          Value: owned

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref EksVpc
      Tags:
        - Key: Name
          Value: public-rt

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref EksVpcIgw

  PublicSubnetRouteTableAssociationUsEast1a:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetUsEast1a
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociationUsEast1b:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetUsEast1b
      RouteTableId: !Ref PublicRouteTable

  EksRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'eks-cluster-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  EksCluster:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: 'eks-cluster'
      RoleArn: !GetAtt EksRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnetUsEast1a
          - !Ref PublicSubnetUsEast1b
      Version: '1.29'

  EksNodeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'eks-node-group-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  EksNodeGroup:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      ClusterName: !Ref EksCluster
      NodeRole: !GetAtt EksNodeRole.Arn
      NodegroupName: 'eks-node-group'
      Subnets: 
        - !Ref PublicSubnetUsEast1a
        - !Ref PublicSubnetUsEast1b
      ScalingConfig:
        DesiredSize: 1
        MaxSize: 5
        MinSize: 1
      InstanceTypes: ["t2.medium"]
      AmiType: AL2_x86_64
      CapacityType: ON_DEMAND

  StaticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: 'my-static-load-balancer'
      Subnets:
        - !Ref PublicSubnetUsEast1a
        - !Ref PublicSubnetUsEast1b
      SecurityGroups: 
        - !GetAtt EksCluster.SecurityGroupIds
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: my-static-load-balancer

  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '200'
            ContentType: text/plain
            MessageBody: 'Load Balancer is up and running'
      LoadBalancerArn: !Ref StaticLoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  EksVpcId:
    Description: "VPC Id of the created VPC"
    Value: !Ref EksVpc

  EksClusterName:
    Description: "Name of the EKS Cluster"
    Value: !Ref EksCluster

  EksClusterRoleArn:
    Description: "ARN of the EKS Cluster IAM Role"
    Value: !GetAtt EksRole.Arn

  EksNodeRoleArn:
    Description: "ARN of the EKS Node Group IAM Role"
    Value: !GetAtt EksNodeRole.Arn

  LoadBalancerDNSName:
    Description: "DNS Name of the Load Balancer"
    Value: !GetAtt StaticLoadBalancer.DNSName
